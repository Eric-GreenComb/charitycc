// Code generated by protoc-gen-go.
// source: channel.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Channel model
type Channel struct {
	Addr  string             `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Id    string             `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name  string             `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Total uint64             `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	Fees  []*ChannelFeeTrack `protobuf:"bytes,5,rep,name=fees" json:"fees,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Channel) GetFees() []*ChannelFeeTrack {
	if m != nil {
		return m.Fees
	}
	return nil
}

// ChannelFeeTrack model
type ChannelFeeTrack struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amount    uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ChannelFeeTrack) Reset()                    { *m = ChannelFeeTrack{} }
func (m *ChannelFeeTrack) String() string            { return proto.CompactTextString(m) }
func (*ChannelFeeTrack) ProtoMessage()               {}
func (*ChannelFeeTrack) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*Channel)(nil), "protos.Channel")
	proto.RegisterType((*ChannelFeeTrack)(nil), "protos.ChannelFeeTrack")
}

func init() { proto.RegisterFile("channel.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x48, 0xcc,
	0xcb, 0x4b, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0x2d,
	0x8c, 0x5c, 0xec, 0xce, 0x10, 0x19, 0x21, 0x21, 0x2e, 0x96, 0xc4, 0x94, 0x94, 0x22, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x45, 0x82, 0x09, 0x2c,
	0xc2, 0x94, 0x99, 0x02, 0x52, 0x93, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x0c, 0x51, 0x03, 0x62, 0x0b,
	0x89, 0x70, 0xb1, 0x96, 0xe4, 0x97, 0x24, 0xe6, 0x48, 0xb0, 0x28, 0x30, 0x6a, 0xb0, 0x04, 0x41,
	0x38, 0x42, 0xda, 0x5c, 0x2c, 0x69, 0xa9, 0xa9, 0xc5, 0x12, 0xac, 0x0a, 0xcc, 0x1a, 0xdc, 0x46,
	0xe2, 0x10, 0x7b, 0x8b, 0xf5, 0xa0, 0x96, 0xb9, 0xa5, 0xa6, 0x86, 0x14, 0x25, 0x26, 0x67, 0x07,
	0x81, 0x15, 0x29, 0x45, 0x73, 0xf1, 0xa3, 0x49, 0xc0, 0x6d, 0x62, 0x44, 0xb2, 0x49, 0x8c, 0x8b,
	0x2d, 0x31, 0x37, 0xbf, 0x34, 0xaf, 0x04, 0xec, 0x22, 0x96, 0x20, 0x28, 0x4f, 0x48, 0x86, 0x8b,
	0xb3, 0x24, 0x33, 0x37, 0xb5, 0xb8, 0x24, 0x31, 0xb7, 0x00, 0xec, 0x34, 0xe6, 0x20, 0x84, 0x40,
	0x12, 0xc4, 0xaf, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x2b, 0xe5, 0x4e, 0x03, 0x01,
	0x00, 0x00,
}
