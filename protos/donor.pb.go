// Code generated by protoc-gen-go.
// source: donor.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Donor model
type Donor struct {
	Addr          string               `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Id            string               `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Total         uint64               `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	Contributions []*DonorContribution `protobuf:"bytes,5,rep,name=contributions" json:"contributions,omitempty"`
	Trackings     []*DonorTrack        `protobuf:"bytes,6,rep,name=trackings" json:"trackings,omitempty"`
}

func (m *Donor) Reset()                    { *m = Donor{} }
func (m *Donor) String() string            { return proto.CompactTextString(m) }
func (*Donor) ProtoMessage()               {}
func (*Donor) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Donor) GetContributions() []*DonorContribution {
	if m != nil {
		return m.Contributions
	}
	return nil
}

func (m *Donor) GetTrackings() []*DonorTrack {
	if m != nil {
		return m.Trackings
	}
	return nil
}

// Donor Contribution model
type DonorContribution struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Treatyname string `protobuf:"bytes,2,opt,name=treatyname" json:"treatyname,omitempty"`
	Treatyaddr string `protobuf:"bytes,3,opt,name=treatyaddr" json:"treatyaddr,omitempty"`
	Amount     uint64 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Timestamp  int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *DonorContribution) Reset()                    { *m = DonorContribution{} }
func (m *DonorContribution) String() string            { return proto.CompactTextString(m) }
func (*DonorContribution) ProtoMessage()               {}
func (*DonorContribution) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

// DonorTrack model
type DonorTrack struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Contractname string `protobuf:"bytes,2,opt,name=contractname" json:"contractname,omitempty"`
	Contractaddr string `protobuf:"bytes,3,opt,name=contractaddr" json:"contractaddr,omitempty"`
	Amount       uint64 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Timestamp    int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *DonorTrack) Reset()                    { *m = DonorTrack{} }
func (m *DonorTrack) String() string            { return proto.CompactTextString(m) }
func (*DonorTrack) ProtoMessage()               {}
func (*DonorTrack) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func init() {
	proto.RegisterType((*Donor)(nil), "protos.Donor")
	proto.RegisterType((*DonorContribution)(nil), "protos.DonorContribution")
	proto.RegisterType((*DonorTrack)(nil), "protos.DonorTrack")
}

func init() { proto.RegisterFile("donor.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4a, 0xc5, 0x30,
	0x10, 0xc6, 0x49, 0xff, 0x41, 0xe7, 0xa9, 0xe0, 0x20, 0x12, 0x41, 0xa4, 0x74, 0xd5, 0xd5, 0x43,
	0xf4, 0x00, 0x2e, 0xf4, 0x04, 0xc5, 0x0b, 0xe4, 0x35, 0x45, 0x82, 0x36, 0x79, 0x24, 0xf3, 0x16,
	0x1e, 0x46, 0xcf, 0xe3, 0xb1, 0xa4, 0x93, 0x87, 0x4d, 0xd1, 0x95, 0xab, 0x26, 0xdf, 0xf7, 0x4d,
	0xe7, 0x37, 0x43, 0x60, 0xa3, 0x9d, 0x75, 0x7e, 0xbb, 0xf7, 0x8e, 0x1c, 0x56, 0xfc, 0x09, 0xed,
	0x97, 0x80, 0xf2, 0x69, 0xd6, 0x11, 0xa1, 0x50, 0x5a, 0x7b, 0x29, 0x1a, 0xd1, 0xd5, 0x3d, 0x9f,
	0xf1, 0x0c, 0x32, 0xa3, 0x65, 0xc6, 0x4a, 0x66, 0xf4, 0x9c, 0xb1, 0x6a, 0x1a, 0x65, 0x1e, 0x33,
	0xf3, 0x19, 0x2f, 0xa0, 0x24, 0x47, 0xea, 0x4d, 0x16, 0x8d, 0xe8, 0x8a, 0x3e, 0x5e, 0xf0, 0x01,
	0x4e, 0x07, 0x67, 0xc9, 0x9b, 0xdd, 0x81, 0x8c, 0xb3, 0x41, 0x96, 0x4d, 0xde, 0x6d, 0xee, 0xae,
	0x62, 0xfb, 0xb0, 0xe5, 0x9e, 0x8f, 0x49, 0xa2, 0x5f, 0xe7, 0xf1, 0x16, 0x6a, 0xf2, 0x6a, 0x78,
	0x35, 0xf6, 0x25, 0xc8, 0x8a, 0x8b, 0x71, 0x55, 0xfc, 0x3c, 0xbb, 0xfd, 0x12, 0x6a, 0x3f, 0x04,
	0x9c, 0xff, 0xfa, 0xed, 0x0f, 0xb2, 0x48, 0x90, 0x6f, 0x00, 0xc8, 0x8f, 0x8a, 0xde, 0xd9, 0x89,
	0xe3, 0x25, 0xca, 0xe2, 0xf3, 0x42, 0xf2, 0xd4, 0xe7, 0xb5, 0x5c, 0x42, 0xa5, 0x26, 0x77, 0xb0,
	0x74, 0x9c, 0xf9, 0x78, 0xc3, 0x6b, 0xa8, 0xc9, 0x4c, 0x63, 0x20, 0x35, 0xed, 0x65, 0xd9, 0x88,
	0x2e, 0xef, 0x17, 0xa1, 0xfd, 0x14, 0x00, 0x0b, 0xf9, 0x9f, 0x60, 0x2d, 0x9c, 0xf0, 0x16, 0xd4,
	0x40, 0x09, 0xda, 0x4a, 0x4b, 0x33, 0x09, 0xde, 0x4a, 0xfb, 0x1f, 0xe0, 0x2e, 0xbe, 0x89, 0xfb,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x4d, 0x99, 0x04, 0x29, 0x02, 0x00, 0x00,
}
