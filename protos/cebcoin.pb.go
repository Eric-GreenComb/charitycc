// Code generated by protoc-gen-go.
// source: cebcoin.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// account model digitalAssets
type Account struct {
	Addr         string   `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Balance      uint64   `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	RsaPublicKey string   `protobuf:"bytes,3,opt,name=rsaPublicKey" json:"rsaPublicKey,omitempty"`
	CoinKey      []string `protobuf:"bytes,4,rep,name=coinKey" json:"coinKey,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// utxo tx
type TX struct {
	Version   uint64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp int64       `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Txin      []*TX_TXIN  `protobuf:"bytes,3,rep,name=txin" json:"txin,omitempty"`
	Txout     []*TX_TXOUT `protobuf:"bytes,4,rep,name=txout" json:"txout,omitempty"`
	InputData string      `protobuf:"bytes,5,opt,name=inputData" json:"inputData,omitempty"`
	Founder   string      `protobuf:"bytes,6,opt,name=founder" json:"founder,omitempty"`
}

func (m *TX) Reset()                    { *m = TX{} }
func (m *TX) String() string            { return proto.CompactTextString(m) }
func (*TX) ProtoMessage()               {}
func (*TX) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TX) GetTxin() []*TX_TXIN {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *TX) GetTxout() []*TX_TXOUT {
	if m != nil {
		return m.Txout
	}
	return nil
}

// txin not specified who has this txin, because creator can use their txout only, txin must be creator's previous txout
type TX_TXIN struct {
	Idx          uint32 `protobuf:"varint,1,opt,name=idx" json:"idx,omitempty"`
	SourceTxHash string `protobuf:"bytes,2,opt,name=sourceTxHash" json:"sourceTxHash,omitempty"`
	// indicate owner's addr
	Addr string `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
}

func (m *TX_TXIN) Reset()                    { *m = TX_TXIN{} }
func (m *TX_TXIN) String() string            { return proto.CompactTextString(m) }
func (*TX_TXIN) ProtoMessage()               {}
func (*TX_TXIN) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type TX_TXOUT struct {
	Value uint64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Addr  string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Attr  string `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
	Sign  string `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
}

func (m *TX_TXOUT) Reset()                    { *m = TX_TXOUT{} }
func (m *TX_TXOUT) String() string            { return proto.CompactTextString(m) }
func (*TX_TXOUT) ProtoMessage()               {}
func (*TX_TXOUT) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 1} }

func init() {
	proto.RegisterType((*Account)(nil), "protos.Account")
	proto.RegisterType((*TX)(nil), "protos.TX")
	proto.RegisterType((*TX_TXIN)(nil), "protos.TX.TXIN")
	proto.RegisterType((*TX_TXOUT)(nil), "protos.TX.TXOUT")
}

func init() { proto.RegisterFile("cebcoin.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x51, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x65, 0x4d, 0xba, 0xd1, 0xcc, 0xe1, 0x08, 0x3e, 0x84, 0xe1, 0x43, 0x99, 0x20, 0x7d, 0xda,
	0xc3, 0xfc, 0x02, 0xc1, 0x07, 0x45, 0xd0, 0x11, 0x2a, 0xcc, 0xc7, 0x34, 0x8d, 0x1a, 0xd8, 0x92,
	0xd1, 0x24, 0xa3, 0xfe, 0xb4, 0xdf, 0x20, 0xb9, 0xb5, 0xab, 0x7b, 0xea, 0x3d, 0xe7, 0xe4, 0xf6,
	0xdc, 0x7b, 0x2e, 0x99, 0x49, 0x55, 0x49, 0xab, 0xcd, 0xea, 0xd0, 0x58, 0x6f, 0xe9, 0x18, 0x3e,
	0x6e, 0x19, 0xc8, 0xe4, 0x5e, 0x4a, 0x1b, 0x8c, 0xa7, 0x94, 0x60, 0x51, 0xd7, 0x0d, 0x1b, 0xe5,
	0xa3, 0x22, 0xe3, 0x50, 0x53, 0x46, 0x26, 0x95, 0xd8, 0x09, 0x23, 0x15, 0x4b, 0xf2, 0x51, 0x81,
	0x79, 0x0f, 0xe9, 0x92, 0x5c, 0x34, 0x4e, 0x6c, 0x42, 0xb5, 0xd3, 0xf2, 0x59, 0x7d, 0x33, 0x04,
	0x5d, 0x67, 0x5c, 0xec, 0x8e, 0x96, 0x51, 0xc6, 0x39, 0x2a, 0x32, 0xde, 0xc3, 0xe5, 0x4f, 0x42,
	0x92, 0x72, 0x1b, 0x1f, 0x1c, 0x55, 0xe3, 0xb4, 0x35, 0xe0, 0x8a, 0x79, 0x0f, 0xe9, 0x35, 0xc9,
	0xbc, 0xde, 0x2b, 0xe7, 0xc5, 0xfe, 0x00, 0xd6, 0x88, 0x0f, 0x04, 0xbd, 0x21, 0xd8, 0xb7, 0xda,
	0x30, 0x94, 0xa3, 0x62, 0xba, 0xbe, 0xec, 0x76, 0x72, 0xab, 0x72, 0xbb, 0x2a, 0xb7, 0x4f, 0x2f,
	0x1c, 0x44, 0x7a, 0x4b, 0x52, 0xdf, 0xda, 0xe0, 0xc1, 0x7b, 0xba, 0x9e, 0x9f, 0xbd, 0x7a, 0x7d,
	0x2b, 0x79, 0x27, 0x47, 0x2b, 0x6d, 0x0e, 0xc1, 0x3f, 0x08, 0x2f, 0x58, 0x0a, 0x6b, 0x0c, 0x44,
	0x1c, 0xf1, 0xc3, 0x06, 0x53, 0xab, 0x86, 0x8d, 0x41, 0xeb, 0xe1, 0x62, 0x43, 0x70, 0x74, 0xa3,
	0x73, 0x82, 0x74, 0xdd, 0xc2, 0x02, 0x33, 0x1e, 0xcb, 0x98, 0x8d, 0xb3, 0xa1, 0x91, 0xaa, 0x6c,
	0x1f, 0x85, 0xfb, 0x82, 0xf9, 0x33, 0x7e, 0xc6, 0x9d, 0xd2, 0x46, 0x43, 0xda, 0x8b, 0x77, 0x92,
	0xc2, 0x64, 0xf4, 0x8a, 0xa4, 0x47, 0xb1, 0x0b, 0xea, 0x2f, 0x95, 0x0e, 0x9c, 0x5a, 0x92, 0x7f,
	0x07, 0x8a, 0x9c, 0xf7, 0xc3, 0x6f, 0xbc, 0x07, 0xce, 0xe9, 0x4f, 0xc3, 0x70, 0xc7, 0xc5, 0xba,
	0xea, 0xee, 0x7d, 0xf7, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x19, 0x81, 0x9d, 0x1f, 0x07, 0x02, 0x00,
	0x00,
}
